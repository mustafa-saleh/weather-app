{"version":3,"sources":["components/FontAwesome/FontAwesome.jsx","utils/basic.js","components/GoogleMaps/GoogleMaps.jsx","components/Modal/Modal.jsx","components/SearchBar/SearchBar.jsx","components/Weather/Location/Location.jsx","components/Weather/WeatherInfo/WeatherInfo.jsx","utils/datetime.js","components/Weather/WeatherDateTime/WeatherDateTime.jsx","components/Weather/FutureWeather/FutureWeatherUI.jsx","components/Weather/FutureWeather/WeatherChart.jsx","components/Weather/FutureWeather/FutureWeather.jsx","components/Weather/DetailedForecast/DetailedForecast.jsx","components/Weather/Weather.jsx","components/AppTitle/AppTitle.jsx","components/HelperText/HelperText.jsx","utils/fetch.js","config.js","App.js","serviceWorker.js","index.js","assets/icons/Night.svg","assets/icons/Cloudy.svg"],"names":["FaIcon","props","color","size","isEmpty","obj","Object","entries","length","MapContainer","mapClicked","mapProps","map","clickEvent","latLng","lat","lng","setMarker","this","google","style","position","height","zoom","onClick","initialCenter","marker","draggable","icon","url","Component","GoogleApiWrapper","apiKey","FaModal","show","close","fetchWeather","useState","handleClose","Modal","onHide","centered","Body","Footer","Button","variant","WeatherForm","searchText","setSearchText","handleSubmit","event","preventDefault","trim","onSubmit","e","placeholder","value","onChange","target","faTimes","faSearch","GoogleMap","setShow","faMapMarkedAlt","SearchBar","fetchByCity","fetchByCoords","searchProps","id","Location","city","name","country","OtherInfo","visibility","humidity","wind","className","Math","round","speed","MainInfo","main","weather","src","Night","alt","temp","temp_max","temp_min","WeatherInfo","currentWeather","days","getWeatherDate","utcSeconds","timezone","dt","Date","utcDt","setUTCSeconds","datetime","getDay","getDate","toLocaleTimeString","hour","minute","timeZone","WeatherDateTime","description","FutureWeatherUI","Cloudy","Chart","pluginService","register","beforeRender","chart","config","options","showAllTooltips","pluginTooltips","data","datasets","forEach","dataset","i","getDatasetMeta","sector","j","push","Tooltip","_chart","_chartInstance","_data","_options","tooltips","_active","enabled","afterDraw","easing","allTooltipsOnce","helpers","each","tooltip","initialize","update","pivot","transition","draw","WeatherChart","chartRef","useRef","useEffect","areaChartRef","current","getContext","canvas","type","labels","backgroundColor","borderColor","borderWidth","maintainAspectRatio","responsive","layout","padding","left","right","top","bottom","caretSize","bodyFontSize","bodyFontColor","displayColors","yAlign","yPadding","caretPadding","callbacks","title","tooltipItem","legend","display","scales","xAxes","gridLines","ticks","fontColor","yAxes","beginAtZero","suggestedMax","stepSize","ref","FutureWeather","list","Weathers","val","Tab","key","eventKey","Tabs","defaultActiveKey","bsPrefix","DetailedForecast","href","Weather","AppTitle","HelperText","getUrl","targetApi","coords","query","getQuery","a","ret","url1","url2","Promise","all","fetch","then","json","threeFive","oneCall","catch","err","console","log","cityName","response","ok","coord","lon","response2","result","error","App","loading","setLoading","setError","setWeather","navigator","geolocation","getCurrentPosition","latitude","longitude","Container","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5f47cabc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst FaIcon = (props) => {\r\n  return (\r\n    <span>\r\n      <FontAwesomeIcon color=\"#767676\" size=\"lg\" {...props}/>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FaIcon;\r\n","function isEmpty(obj) {\r\n    return Object.entries(obj).length === 0\r\n}\r\n\r\nexport {\r\n    isEmpty\r\n}","import React, { Component } from \"react\";\r\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\nimport { isEmpty } from \"../../utils/basic\";\r\n\r\nexport class MapContainer extends Component {\r\n  mapClicked = (mapProps, map, clickEvent) => {\r\n    const latLng = {\r\n      lat: clickEvent.latLng.lat(),\r\n      lng: clickEvent.latLng.lng(),\r\n    };\r\n    this.props.setMarker(latLng);\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.google) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            height: \"calc(60vh)\",\r\n          }}\r\n        >\r\n          <Map\r\n            zoom={2}\r\n            onClick={this.mapClicked}\r\n            google={this.props.google}\r\n            initialCenter={{ lat: 15.5007, lng: 32.5599 }}\r\n          >\r\n            {isEmpty(this.props.marker) ? null : (\r\n              <Marker\r\n                draggable\r\n                position={this.props.marker}\r\n                icon={{\r\n                  url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\r\n                }}\r\n              />\r\n            )}\r\n          </Map>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyD3s785xPg5XvFY5XOBUy6JiyOIcZOsyFQ\",\r\n  //   v: \"3.30\",\r\n})(MapContainer);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport MapContainer from \"../GoogleMaps\";\r\nimport \"./Modal.css\";\r\nimport { isEmpty } from \"../../utils/basic\";\r\n\r\nconst FaModal = ({ show, close, fetchWeather }) => {\r\n  const [marker, setMarker] = useState({});\r\n  const handleClose = () => close();\r\n\r\n  const handleSearch = () => {\r\n    if(!isEmpty(marker)){\r\n      fetchWeather(marker);\r\n      close();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose} centered size=\"lg\">\r\n      <Modal.Body>\r\n        <MapContainer marker={marker} setMarker={setMarker} />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"light\" size=\"sm\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n        <Button variant=\"info\" size=\"sm\" onClick={handleSearch}>\r\n          Search Location\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FaModal;\r\n","import React, { useState } from \"react\";\r\nimport FaIcon from \"../FontAwesome\";\r\nimport MapModal from \"../Modal\";\r\nimport {\r\n  faMapMarkedAlt,\r\n  faSearch,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./SearchBar.css\";\r\n\r\nconst WeatherForm = ({ searchText, setSearchText, fetchWeather }) => {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (searchText.trim().length > 0) {\r\n      fetchWeather(searchText.trim());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <input\r\n        placeholder=\"search city\"\r\n        value={searchText}\r\n        onChange={(e) => setSearchText(e.target.value)}\r\n      />\r\n      {searchText.length ? (\r\n        <FaIcon icon={faTimes} onClick={() => setSearchText(\"\")} />\r\n      ) : null}\r\n      <FaIcon\r\n        icon={faSearch}\r\n        color=\"#1287A5\"\r\n        onClick={(e) => handleSubmit(e)}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nconst GoogleMap = ({ fetchWeather }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const openMap = () => setShow(true);\r\n  const closeMap = () => setShow(false);\r\n\r\n  return (\r\n    <>\r\n      <FaIcon icon={faMapMarkedAlt} size=\"xs\" />\r\n      <small onClick={openMap}>use google maps</small>\r\n      <MapModal show={show} close={closeMap} fetchWeather={fetchWeather} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst SearchBar = ({ fetchByCity, fetchByCoords }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const searchProps = { searchText, setSearchText, fetchWeather: fetchByCity };\r\n\r\n  return (\r\n    <div id=\"search-bar\">\r\n      <WeatherForm {...searchProps} />\r\n      <GoogleMap fetchWeather={fetchByCoords} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./Location.css\";\r\n\r\nconst Location = ({ city }) => {\r\n  return (\r\n    <div id=\"location\">\r\n      {`${city.name}, ${city.country}`}\r\n      <br />\r\n      <small>Updated a few minutes ago</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport Night from \"../../../assets/icons/Night.svg\";\r\nimport \"./WeatherInfo.css\";\r\n\r\nconst OtherInfo = ({visibility, humidity, wind}) => {\r\n  return (\r\n    <div className=\"other-info\">\r\n      <div>Vision: {Math.round(visibility/1000)} KM</div>\r\n      <div>Wind: {Math.round(wind.speed)} KMPH</div>\r\n      <div>Humidity: {humidity}%</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MainInfo = ({main, weather}) => {\r\n  return (\r\n    <div className=\"main-info\">\r\n      <img src={Night} alt=\"weather logo\" />\r\n      <p>{Math.round(main.temp)}</p>\r\n      <div className=\"temperature\">\r\n        <div>°C</div>\r\n        <button id=\"feh-button\" className=\"btn btn-link\">\r\n          F\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <div>{Math.round(main.temp_max)}°</div>\r\n        <div>{Math.round(main.temp_min)}°</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WeatherInfo = ({currentWeather}) => {\r\n  return (\r\n    <div className=\"info\">\r\n      <MainInfo main={currentWeather.main} weather={currentWeather.weather} />\r\n      <OtherInfo visibility={currentWeather.visibility} humidity={currentWeather.main.humidity} wind={currentWeather.wind} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\nfunction getDay(datetime) {\r\n  return days[datetime.getDay()];\r\n}\r\n\r\nfunction getWeatherDate(utcSeconds, timezone) {\r\n  const dt = new Date(0);\r\n  const utcDt = utcSeconds + timezone;\r\n  dt.setUTCSeconds(utcDt);\r\n\r\n  let options = { hour: \"2-digit\", minute: \"2-digit\", timeZone: \"UTC\" };\r\n  return `\r\n  ${getDay(dt)} ${dt.getDate()}, ${dt.toLocaleTimeString([], options)}\r\n  `;\r\n}\r\n\r\nexport { getDay, getWeatherDate };\r\n","import React from \"react\";\r\nimport \"./WeatherDateTime.css\";\r\nimport { getWeatherDate } from \"../../../utils/datetime\";\r\n\r\nconst WeatherDateTime = ({ description, dt, timezone }) => {\r\n  return (\r\n    <div className=\"date-time\">\r\n      <div>{description}</div>\r\n      <div>{getWeatherDate(dt, timezone)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDateTime;\r\n","import React from \"react\";\r\nimport Cloudy from \"../../../assets/icons/Cloudy.svg\";\r\n\r\nconst FutureWeatherUI = (props) => {\r\n  return (\r\n    <div className=\"future-card\">\r\n      <div>Mon 21</div>\r\n      <img src={Cloudy} alt=\"weather Image\" />\r\n      <div>38°</div>\r\n      <div>27°</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FutureWeatherUI;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nChart.pluginService.register({\r\n  beforeRender: function (chart) {\r\n    if (chart.config.options.showAllTooltips) {\r\n      chart.pluginTooltips = [];\r\n      chart.config.data.datasets.forEach(function (dataset, i) {\r\n        chart.getDatasetMeta(i).data.forEach(function (sector, j) {\r\n          chart.pluginTooltips.push(\r\n            new Chart.Tooltip(\r\n              {\r\n                _chart: chart.chart,\r\n                _chartInstance: chart,\r\n                _data: chart.data,\r\n                _options: chart.options.tooltips,\r\n                _active: [sector],\r\n              },\r\n              chart\r\n            )\r\n          );\r\n        });\r\n      });\r\n\r\n      // turn off normal tooltips\r\n      chart.options.tooltips.enabled = false;\r\n    }\r\n  },\r\n  afterDraw: function (chart, easing) {\r\n    if (chart.config.options.showAllTooltips) {\r\n      if (!chart.allTooltipsOnce) {\r\n        if (easing !== 1) return;\r\n        chart.allTooltipsOnce = true;\r\n      }\r\n\r\n      // turn on tooltips\r\n      chart.options.tooltips.enabled = true;\r\n      Chart.helpers.each(chart.pluginTooltips, function (tooltip) {\r\n        tooltip.initialize();\r\n        tooltip.update();\r\n        tooltip.pivot();\r\n        tooltip.transition(easing).draw();\r\n      });\r\n      chart.options.tooltips.enabled = false;\r\n    }\r\n  },\r\n});\r\n\r\nconst WeatherChart = (props) => {\r\n  const chartRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const areaChartRef = chartRef.current.getContext(\"2d\");\r\n    areaChartRef.canvas.height = \"120\";\r\n\r\n    new Chart(areaChartRef, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: [\r\n          \"1 AM\",\r\n          \"4 AM\",\r\n          \"7 AM\",\r\n          \"10 AM\",\r\n          \"1 PM\",\r\n          \"4 PM\",\r\n          \"7 PM\",\r\n          \"10 PM\",\r\n        ],\r\n        datasets: [\r\n          {\r\n            data: [31, 30, 37, 30, 30, 33, 37, 35],\r\n            backgroundColor: \"#fef9cc\",\r\n            borderColor: \"#fbe000\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        showAllTooltips: true,\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        layout: {\r\n          padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n          },\r\n        },\r\n        tooltips: {\r\n          backgroundColor: \"white\",\r\n          caretSize: 0,\r\n          bodyFontSize: 14,\r\n          bodyFontColor: \"#666\",\r\n          displayColors: false,\r\n          yAlign: \"bottom\",\r\n          yPadding: 0,\r\n          caretPadding: 6,\r\n          callbacks: {\r\n            title: function (tooltipItem, data) {\r\n              return \"\"; //data['labels'][tooltipItem[0]['index']];\r\n            }\r\n          },\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                fontColor: \"#666\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: false,\r\n              ticks: {\r\n                beginAtZero: true,\r\n                suggestedMax: 50,\r\n                stepSize: 1,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <canvas id=\"areaChart\" ref={chartRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherChart;\r\n","import React from \"react\";\r\nimport { Tab, Tabs } from \"react-bootstrap\";\r\nimport \"./FutureWeather.css\";\r\nimport FutureWeatherUI from \"./FutureWeatherUI\";\r\nimport WeatherChart from \"./WeatherChart\";\r\n\r\nconst FutureWeather = ({list}) => {\r\n  const temp = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n  const Weathers = temp.map((val) => (\r\n    <Tab key={val} eventKey={`tab-${val}`} title={<FutureWeatherUI />}>\r\n      <div className=\"chart\">\r\n        <WeatherChart />\r\n        {/* {`Tab ${val} Context`} */}\r\n      </div>\r\n    </Tab>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"future-weather\">\r\n      <Tabs\r\n        defaultActiveKey=\"tab-1\"\r\n        transition={false}\r\n        bsPrefix=\"nv\"\r\n        variant=\"weather-tabs\"\r\n      >\r\n        {Weathers}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FutureWeather;\r\n","import React from \"react\";\r\nimport \"./DetailedForecast.css\";\r\n\r\nconst DetailedForecast = () => {\r\n  return (\r\n    <div className=\"detailed\">\r\n      <a href=\"https://openweathermap.org/\" target=\"_blank\">Detailed forecast</a> · Data from OpenWeather\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedForecast;\r\n","import React, { useState } from \"react\";\r\nimport Location from \"./Location\";\r\nimport \"./Weather.css\";\r\nimport WeatherInfo from \"./WeatherInfo\";\r\nimport WeatherDateTime from \"./WeatherDateTime\";\r\nimport FutureWeather from \"./FutureWeather\";\r\nimport DetailedForecast from \"./DetailedForecast\";\r\n\r\nconst Weather = ({ data }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <Location city={data.city} />\r\n      <WeatherInfo currentWeather={data.list[0]} />\r\n      <WeatherDateTime\r\n        description={data.list[0].weather[0].description}\r\n        dt={data.list[0].dt}\r\n        timezone={data.city.timezone}\r\n      />\r\n      <FutureWeather list={data.list}/>\r\n      <DetailedForecast />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport './AppTitle.css';\r\n\r\nconst AppTitle = () => {\r\n  return <h1 id=\"app-title\">OpenWeather App</h1>;\r\n};\r\n\r\nexport default AppTitle;\r\n","import React from \"react\";\r\nimport './HelperText.css';\r\n\r\nconst HelperText = () => {\r\n  return (\r\n    <div className=\"help-text\">\r\n      <p>\r\n        <strong> Search engine is very flexible. How it works:</strong>\r\n        <br />\r\n        To make it more precise put the city's name, comma, 2-letter country\r\n        code (ISO3166). You will get all proper cities in chosen country. The\r\n        order is important - the first is city name then comma then country.\r\n        Example - London, GB or New York, US.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelperText;\r\n","import { API_URL, API_KEY } from \"../config\";\r\n\r\nfunction getQuery(city, coords) {\r\n  let query;\r\n  if (coords === null) {\r\n    query = `?q=${city}`;\r\n  } else {\r\n    query = `?lat=${coords.lat}&lon=${coords.lng}&exclude=minutely,hourly,alerts`;\r\n  }\r\n\r\n  return `${query}&appid=${API_KEY}&units=metric&lang=en`;\r\n}\r\n\r\nfunction getUrl(targetApi, city, coords) {\r\n  const query = getQuery(city, coords);\r\n  return `${API_URL}${targetApi}${query}`;\r\n}\r\n\r\nasync function fetchByCoords(coords) {\r\n  const ret = {};\r\n  const url1 = getUrl(\"forecast\", null, coords);\r\n  const url2 = getUrl(\"onecall\", null, coords);\r\n\r\n  await Promise.all([\r\n    fetch(url1).then((value) => value.json()),\r\n    fetch(url2).then((value) => value.json()),\r\n  ])\r\n    .then((value) => {\r\n      ret.threeFive = value[0];\r\n      ret.oneCall = value[1];\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"fetch ERROR: \", err);\r\n    });\r\n  return ret;\r\n}\r\n\r\nasync function fetchByCity(cityName) {\r\n  const ret = {};\r\n  const url1 = getUrl(\"forecast\", cityName, null);\r\n\r\n  const response = await fetch(url1);\r\n  if (response.ok) {\r\n    await response.json().then(async (value) => {\r\n      const coords = {\r\n        lat: value.city.coord.lat,\r\n        lng: value.city.coord.lon,\r\n      };\r\n      const url2 = getUrl(\"onecall\", null, coords);\r\n      const response2 = await fetch(url2);\r\n      if (response2.ok) {\r\n        await response2.json().then((result) => {\r\n          ret.threeFive = value;\r\n          ret.oneCall = result;\r\n          ret.ok = true;\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"fetch city ERROR: \", err);\r\n    });\r\n  } else {\r\n    await response.json().then(err => {\r\n      ret.ok = false;\r\n      ret.error = err;\r\n    })\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport { fetchByCoords, fetchByCity };\r\n","const API_URL = \"https://api.openweathermap.org/data/2.5/\";\r\nconst API_KEY = \"06e049b7e07cd7c2f35f0fc665d48535\";\r\n\r\nexport { API_URL, API_KEY };\r\n","import React, { useState, useEffect } from \"react\";\nimport SearchBar from \"./components/SearchBar\";\nimport Weather from \"./components/Weather\";\nimport AppTitle from \"./components/AppTitle\";\nimport HelperText from \"./components/HelperText\";\nimport { Container } from \"react-bootstrap\";\nimport { fetchByCoords, fetchByCity } from \"./utils/fetch\";\nimport { isEmpty } from \"./utils/basic\";\nimport \"./App.css\";\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({});\n  const [weather, setWeather] = useState({});\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async function (position) {\n        const coords = {\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        };\n        setLoading(true);\n        fetchByCoords(coords).then((result) => {\n          setWeather({ ...result });\n          setLoading(false);\n        });\n      });\n    }\n    console.log(\"Use Effect 1 fired!\");\n  }, []);\n\n  const fetchCityWeather = (searchText) => {\n    console.log(\"city Searching... \", searchText);\n    setLoading(true);\n    fetchByCity(searchText).then((result) => {\n      result.ok ? setWeather({ ...result }) : setError({ ...result.error });\n      setLoading(false);\n    });\n  };\n\n  const fetchCoordsWeather = (coords) => {\n    console.log(\"coords Searching... \", coords);\n    setLoading(true);\n    fetchByCoords(coords).then((result) => {\n      setWeather({ ...result });\n      setLoading(false);\n    });\n  };\n\n  const searchProps = {\n    fetchByCity: fetchCityWeather,\n    fetchByCoords: fetchCoordsWeather,\n  };\n  return (\n    <Container>\n      <div>\n        <AppTitle />\n        <SearchBar {...searchProps} />\n        {loading ? (\n          \"Loading...\"\n        ) : isEmpty(error) === false ? (\n          <small style={{ color: \"red\" }}>\n            {error.message}, try using map instead.\n          </small>\n        ) : isEmpty(weather) ? (\n          <HelperText />\n        ) : (\n          <Weather data={weather.threeFive} />\n        )}\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n{\n  /* JSON.stringify(weather) */\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"slick-carousel/slick/slick.css\"; \nimport \"slick-carousel/slick/slick-theme.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n/**\n    const getDaysWeather = (list) => {\n    const days = [];\n    let i,\n      temp,\n      chunk = 8, minList, maxList;\n    for (i = 0; i < list.length; i += chunk) {\n      temp = list.slice(i, i + chunk);\n      minList = temp.map((item) => item.main.temp_min);\n      maxList = temp.map((item) => item.main.temp_max);\n      days.push({\n        temp_min: Math.min(...minList),\n        temp_max: Math.max(...maxList),\n      });\n    }\n\n    return days;\n  };\n\n  const filterWeatherInfo = (data) => {\n    let filteredData = { list: [] };\n    filteredData.city = {\n      name: data.city.name,\n      country: data.city.country,\n      timezone: data.city.timezone,\n    };\n    data.list.map((item) => {\n      const newItem = {};\n      newItem.dt = item.dt;\n      newItem.main = {\n        temp: item.main.temp,\n        temp_min: item.main.temp_min,\n        temp_max: item.main.temp_max,\n        humidity: item.main.humidity,\n      };\n      newItem.weather = { description: item.weather[0].description };\n      newItem.wind = { speed: item.wind.speed };\n      newItem.visibility = item.visibility;\n\n      filteredData.list.push(newItem);\n    });\n    filteredData.days = getDaysWeather(data.list);\n    console.log(\"FD\", filteredData);\n  };\n */\n\n\n \n  // async function fetchData(text) {\n  //   setLoading(true);\n  //   let query = \"?q=\" + text + \"&appid=\" + API_KEY + \"&units=metric\";\n  //   const response = await fetch(API_URL + \"forecast\" + query);\n  //   response\n  //     .json()\n  //     .then((result) => {\n  //       if (response.ok) {\n  //         console.log(\"5/3: \", result);\n  //         query =\n  //           \"?lat=\" +\n  //           result.city.coord.lat +\n  //           \"&lon=\" +\n  //           result.city.coord.lon +\n  //           \"&appid=\" +\n  //           API_KEY +\n  //           \"&units=metric&exclude=minutely,hourly,alerts\";\n  //         fetch(API_URL + \"onecall\" + query)\n  //           .then((res) => res.json())\n  //           .then((res) => {\n  //             // setOneCall(res);\n  //             console.log(\"oneCall: \", res);\n  //           });\n  //         setWeather(result);\n  //       } else console.log(\"ERR: \", result);\n  //       setLoading(false);\n  //     })\n  //     .catch((err) => console.log(\"ERROR: \", err));\n  // }\n\n  /*\n   size=\"lg\", \"6x\" \n  <FontAwesomeIcon icon={faMapMarkedAlt} size=\"xs\"/>\n  <FontAwesomeIcon icon={faSearch} pull=\"right\"/>\n  <FontAwesomeIcon icon={faTimes} pull=\"right\"/>\n\n    <form id=\"search-form\">\n      <div className=\"form-card\">\n        <input\n          value={searchText}\n          onChange={handleChange}\n          placeholder=\"search city\"\n          name=\"searchText\"\n          className=\"form-control\"\n        />\n        {searchText.length ? (\n          <button\n            className=\"btn btn-light\"\n            data-toggle=\"tooltip\"\n            data-placement=\"bottom\"\n            title=\"Clear\"\n            onClick={handleChange}\n          >\n            <IconContext.Provider value={{ size: \"1.5em\", color: \"grey\" }}>\n              <BsX />\n            </IconContext.Provider>\n          </button>\n        ) : null}\n        <button\n          type=\"submit\"\n          className=\"btn btn-light\"\n          data-toggle=\"tooltip\"\n          data-placement=\"bottom\"\n          name=\"search\"\n          onClick={(e) => {e.preventDefault();searchWeather(searchText)}}\n        >\n          <IconContext.Provider value={{ size: \"1.3em\", color: \"#1287A5\" }}>\n            <BsSearch />\n          </IconContext.Provider>\n        </button>\n      </div>\n      <IconContext.Provider value={{ size: \".8em\", color: \"#767676\" }}>\n        <SiGooglemaps />\n      </IconContext.Provider>\n      <small onClick={hc}>use google maps</small>\n    </form>\n    */\n","module.exports = __webpack_public_path__ + \"static/media/Night.31ba1d2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloudy.3797634d.svg\";"],"sourceRoot":""}