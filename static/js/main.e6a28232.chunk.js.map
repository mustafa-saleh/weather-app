{"version":3,"sources":["assets/icons/Night.svg","assets/icons/Cloudy.svg","components/SearchBar/SearchBar.jsx","components/Weather/Location/Location.jsx","components/Weather/WeatherInfo/WeatherInfo.jsx","components/Weather/WeatherDateTime/WeatherDateTime.jsx","components/Weather/FutureWeather/FutureWeatherUI.jsx","components/Weather/FutureWeather/WeatherChart.jsx","components/Weather/FutureWeather/FutureWeather.jsx","components/Weather/DetailedForecast/DetailedForecast.jsx","components/Weather/Weather.jsx","components/AppTitle/AppTitle.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","className","placeholder","data-toggle","data-placement","title","Provider","value","size","color","type","Location","city","name","country","OtherInfo","humidity","wind","Math","round","speed","MainInfo","main","weather","src","Night","alt","temp","id","temp_max","temp_min","WeatherInfo","currentWeather","WeatherDateTime","FutureWeatherUI","props","Cloudy","Chart","pluginService","register","beforeRender","chart","config","options","showAllTooltips","pluginTooltips","data","datasets","forEach","dataset","i","getDatasetMeta","sector","j","push","Tooltip","_chart","_chartInstance","_data","_options","tooltips","_active","enabled","afterDraw","easing","allTooltipsOnce","helpers","each","tooltip","initialize","update","pivot","transition","draw","WeatherChart","chartRef","useRef","useEffect","areaChartRef","current","getContext","canvas","height","labels","backgroundColor","borderColor","borderWidth","maintainAspectRatio","responsive","layout","padding","left","right","top","bottom","caretSize","bodyFontSize","bodyFontColor","displayColors","yAlign","yPadding","caretPadding","callbacks","tooltipItem","legend","display","scales","xAxes","gridLines","ticks","fontColor","yAxes","beginAtZero","suggestedMax","stepSize","ref","FutureWeather","Weathers","map","val","Tab","key","eventKey","Tabs","defaultActiveKey","bsPrefix","variant","DetailedForecast","href","target","Weather","list","App","useState","loading","setLoading","setError","weatherInfo","setWeatherInfo","url","API_URL","a","fetch","response","json","then","result","ok","catch","err","console","log","fetchData","Container","AppTitle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e6a28232.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Night.31ba1d2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloudy.3797634d.svg\";","import React from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { BsSearch, BsX } from \"react-icons/bs\";\r\nimport \"./SearchBar.css\";\r\n\r\nconst SearchBar = () => {\r\n  return (\r\n    <form>\r\n      <div className=\"form-card\">\r\n        <input placeholder=\"Search City\" className=\"form-control\" />\r\n        <button\r\n          className=\"btn btn-light\"\r\n          data-toggle=\"tooltip\"\r\n          data-placement=\"bottom\"\r\n          title=\"Clear\"\r\n        >\r\n          <IconContext.Provider value={{ size: \"1.5em\", color: \"grey\" }}>\r\n            <BsX />\r\n          </IconContext.Provider>\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-light\"\r\n          data-toggle=\"tooltip\"\r\n          data-placement=\"bottom\"\r\n          title=\"Search\"\r\n        >\r\n          <IconContext.Provider value={{ size: \"1.3em\", color: \"#1287A5\" }}>\r\n            <BsSearch />\r\n          </IconContext.Provider>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst Location = ({city}) => {\r\n  return ( \r\n    <div>\r\n      {`${city.name}, ${city.country}`}\r\n      <br/>\r\n      <div>Updated a few minutes ago</div>\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Location;","import React from \"react\";\r\nimport Night from \"../../../assets/icons/Night.svg\";\r\nimport \"./WeatherInfo.css\";\r\n\r\nconst OtherInfo = ({humidity, wind}) => {\r\n  return (\r\n    <div className=\"other-info\">\r\n      <div>Precipitation: 1%</div>\r\n      <div>Wind: {Math.round(wind.speed)} KMPH</div>\r\n      <div>Humidity: {humidity}%</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MainInfo = ({main, weather}) => {\r\n  return (\r\n    <div className=\"main-info\">\r\n      <img src={Night} alt=\"weather logo\" />\r\n      <p>{Math.round(main.temp)}</p>\r\n      <div className=\"temperature\">\r\n        <div>°C</div>\r\n        <button id=\"feh-button\" className=\"btn btn-link\">\r\n          F\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <div>{Math.round(main.temp_max)}°</div>\r\n        <div>{Math.round(main.temp_min)}°</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst WeatherInfo = ({currentWeather}) => {\r\n  return (\r\n    <div className=\"info\">\r\n      <MainInfo main={currentWeather.main} weather={currentWeather.weather} />\r\n      <OtherInfo humidity={currentWeather.main.humidity} wind={currentWeather.wind} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\r\nimport \"./WeatherDateTime.css\";\r\n\r\nconst WeatherDateTime = () => {\r\n  return (\r\n    <div className=\"date-time\">\r\n    <div>Sunny</div>\r\n    <div>Sun 20, 1:00 PM</div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDateTime;\r\n","import React from \"react\";\r\nimport Cloudy from \"../../../assets/icons/Cloudy.svg\";\r\n\r\nconst FutureWeatherUI = (props) => {\r\n  return (\r\n    <div className=\"future-card\">\r\n      <div>Mon 21</div>\r\n      <img src={Cloudy} alt=\"weather Image\" />\r\n      <div>38°</div>\r\n      <div>27°</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FutureWeatherUI;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nChart.pluginService.register({\r\n  beforeRender: function (chart) {\r\n    if (chart.config.options.showAllTooltips) {\r\n      chart.pluginTooltips = [];\r\n      chart.config.data.datasets.forEach(function (dataset, i) {\r\n        chart.getDatasetMeta(i).data.forEach(function (sector, j) {\r\n          chart.pluginTooltips.push(\r\n            new Chart.Tooltip(\r\n              {\r\n                _chart: chart.chart,\r\n                _chartInstance: chart,\r\n                _data: chart.data,\r\n                _options: chart.options.tooltips,\r\n                _active: [sector],\r\n              },\r\n              chart\r\n            )\r\n          );\r\n        });\r\n      });\r\n\r\n      // turn off normal tooltips\r\n      chart.options.tooltips.enabled = false;\r\n    }\r\n  },\r\n  afterDraw: function (chart, easing) {\r\n    if (chart.config.options.showAllTooltips) {\r\n      if (!chart.allTooltipsOnce) {\r\n        if (easing !== 1) return;\r\n        chart.allTooltipsOnce = true;\r\n      }\r\n\r\n      // turn on tooltips\r\n      chart.options.tooltips.enabled = true;\r\n      Chart.helpers.each(chart.pluginTooltips, function (tooltip) {\r\n        tooltip.initialize();\r\n        tooltip.update();\r\n        tooltip.pivot();\r\n        tooltip.transition(easing).draw();\r\n      });\r\n      chart.options.tooltips.enabled = false;\r\n    }\r\n  },\r\n});\r\n\r\nconst WeatherChart = (props) => {\r\n  const chartRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const areaChartRef = chartRef.current.getContext(\"2d\");\r\n    areaChartRef.canvas.height = \"120\";\r\n\r\n    new Chart(areaChartRef, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: [\r\n          \"1 AM\",\r\n          \"4 AM\",\r\n          \"7 AM\",\r\n          \"10 AM\",\r\n          \"1 PM\",\r\n          \"4 PM\",\r\n          \"7 PM\",\r\n          \"10 PM\",\r\n        ],\r\n        datasets: [\r\n          {\r\n            data: [31, 30, 37, 30, 30, 33, 37, 35],\r\n            backgroundColor: \"#fef9cc\",\r\n            borderColor: \"#fbe000\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        showAllTooltips: true,\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        layout: {\r\n          padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n          },\r\n        },\r\n        tooltips: {\r\n          backgroundColor: \"white\",\r\n          caretSize: 0,\r\n          bodyFontSize: 14,\r\n          bodyFontColor: \"#666\",\r\n          displayColors: false,\r\n          yAlign: \"bottom\",\r\n          yPadding: 0,\r\n          caretPadding: 6,\r\n          callbacks: {\r\n            title: function (tooltipItem, data) {\r\n              return \"\"; //data['labels'][tooltipItem[0]['index']];\r\n            }\r\n          },\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                fontColor: \"#666\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: false,\r\n              ticks: {\r\n                beginAtZero: true,\r\n                suggestedMax: 50,\r\n                stepSize: 1,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <canvas id=\"areaChart\" ref={chartRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherChart;\r\n","import React from \"react\";\r\nimport { Tab, Tabs } from \"react-bootstrap\";\r\nimport \"./FutureWeather.css\";\r\nimport FutureWeatherUI from \"./FutureWeatherUI\";\r\nimport WeatherChart from \"./WeatherChart\";\r\n\r\nconst FutureWeather = () => {\r\n  const temp = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n  const Weathers = temp.map((val) => (\r\n    <Tab key={val} eventKey={`tab-${val}`} title={<FutureWeatherUI />}>\r\n      <div className=\"chart\">\r\n        <WeatherChart />\r\n        {/* {`Tab ${val} Context`} */}\r\n      </div>\r\n    </Tab>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"future-weather\">\r\n      <Tabs\r\n        defaultActiveKey=\"tab-1\"\r\n        transition={false}\r\n        bsPrefix=\"nv\"\r\n        variant=\"weather-tabs\"\r\n      >\r\n        {Weathers}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FutureWeather;\r\n","import React from \"react\";\r\nimport \"./DetailedForecast.css\";\r\n\r\nconst DetailedForecast = () => {\r\n  return (\r\n    <div className=\"detailed\">\r\n      <a href=\"https://openweathermap.org/\" target=\"_blank\">Detailed forecast</a> · Data from OpenWeather\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedForecast;\r\n","import React, { useState } from \"react\";\r\nimport Location from \"./Location\";\r\nimport \"./Weather.css\";\r\nimport WeatherInfo from \"./WeatherInfo\";\r\nimport WeatherDateTime from \"./WeatherDateTime\";\r\nimport FutureWeather from \"./FutureWeather\";\r\nimport DetailedForecast from \"./DetailedForecast\";\r\n\r\nconst Weather = ({ data }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <Location city={data.city} />\r\n      <WeatherInfo currentWeather={data.list[0]} />\r\n      <WeatherDateTime />\r\n      <FutureWeather />\r\n      <DetailedForecast />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\n\r\nconst Weather = () => {\r\n  return ( \r\n    <div>\r\n      <h1>\r\n        Weather App\r\n      </h1>\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Weather;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport Weather from \"./components/Weather\";\nimport AppTitle from \"./components/AppTitle\";\nimport { Container } from \"react-bootstrap\";\nimport { API_URL, API_KEY } from \"./config\";\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState({});\n  const [weatherInfo, setWeatherInfo] = useState({});\n  const query = \"?\" + \"q=khartoum\" + \"&appid=\" + API_KEY + \"&units=metric\";\n  const url = API_URL + query;\n\n  async function fetchData() {\n    setLoading(true);\n    const response = await fetch(url);\n    response\n      .json()\n      .then((result) => {\n        if (response.ok) setWeatherInfo(result);\n        else setError(result);\n        setLoading(false);\n      })\n      .catch((err) => console.log(\"ERROR: \", err));\n  }\n\n  useEffect(() => {\n    fetchData();\n    console.log(\"Use Effect fired!\");\n  }, []);\n\n  return (\n    <Container>\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n        <div>\n          <AppTitle />\n          <SearchBar />\n          <Weather data={weatherInfo} />\n        </div>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"slick-carousel/slick/slick.css\"; \nimport \"slick-carousel/slick/slick-theme.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}