{"version":3,"sources":["components/AppTitle/AppTitle.jsx","components/HelperText/HelperText.jsx","components/Loading/Loading.jsx","components/Error/Error.jsx","components/UnitContext/UnitContext.js","components/BsTabs/BsTabs.jsx","utils/datetime.js","application/Weather/DailyWeather/WeatherChart.jsx","utils/icons.js","utils/unitConverter.js","application/Weather/DailyWeather/WeatherTab.jsx","application/Weather/DailyWeather/DailyWeather.jsx","application/Weather/DetailedForecast/DetailedForecast.jsx","application/Weather/Location/Location.jsx","application/Weather/WeatherDateTime/WeatherDateTime.jsx","application/Weather/WeatherInfo/WeatherInfo.jsx","application/Weather/Weather.jsx","utils/basic.js","utils/fetch.js","config/config.js","components/FontAwesome/FontAwesome.jsx","components/GoogleMaps/GoogleMaps.jsx","components/Modal/Modal.jsx","application/SearchBar/GoogleMap.jsx","application/SearchBar/SearchBar.jsx","application/App.js","serviceWorker.js","index.js","assets/icons/Day.svg","assets/icons/DayCloud.svg","assets/icons/Raining.svg","assets/icons/Night.svg","assets/icons/NightCloud.svg"],"names":["AppTitle","props","id","children","HelperText","className","Loading","Error","style","color","units","UnitContext","React","createContext","BsTabs","activeTab","Tabs","defaultActiveKey","transition","bsPrefix","variant","days","getDay","datetime","Chart","pluginService","register","beforeRender","chart","config","options","showAllTooltips","pluginTooltips","data","datasets","forEach","dataset","i","getDatasetMeta","sector","j","push","Tooltip","_chart","_chartInstance","_data","_options","tooltips","_active","enabled","afterDraw","easing","allTooltipsOnce","helpers","each","tooltip","initialize","update","pivot","draw","WeatherChart","labels","tickMax","tickStep","chartRef","useRef","useEffect","current","type","backgroundColor","borderColor","borderWidth","bezierCurve","responsive","layout","padding","left","right","top","bottom","caretSize","bodyFontSize","bodyFontFamily","bodyFontColor","displayColors","yAlign","yPadding","caretPadding","callbacks","title","tooltipItem","label","legend","display","scales","xAxes","gridLines","ticks","fontColor","fontFamily","fontSize","yAxes","beginAtZero","suggestedMax","stepSize","ref","height","getTabIcon","weather","main","Rain","DayClouds","Day","toFehrehite","temperature","TabTitle","day","timezone","unit","useContext","getTemperature","temp","Math","round","utcSeconds","dt","Date","utcDt","setUTCSeconds","getDate","getWeatherDate","src","alt","max","min","DailyWeather","threeFive","oneCall","daily","slice","timezone_offset","getLabels","details","map","item","toLocaleTimeString","hour","timeZone","getTimeLabel","getData","getChartData","getTabTitle","getDetails","list","index","indexList","date","el","idx","nextDate","getEpochDateTime","chartData","Tab","key","eventKey","DetailedForecast","href","target","Location","city","name","country","WeatherDateTime","description","minute","getWeatherDateTime","WeatherInfo","wind","vision","changeUnit","icon","status","time","sunrise","sunset","dayOrNight","NightClouds","Night","getWeatherIcon","getUnit","onClick","visibility","wind_speed","humidity","Weather","useState","weatherUnit","setWeatherUnit","Provider","value","isEmpty","obj","Object","entries","length","getUrl","targetApi","coords","query","lat","lng","getQuery","fetchByCoords","a","ret","url1","url2","Promise","all","fetch","then","json","catch","err","console","log","fetchByCity","cityName","response","ok","coord","lon","response2","result","error","FaIcon","size","MapContainer","mapClicked","mapProps","clickEvent","latLng","setMarker","this","google","position","zoom","initialCenter","marker","draggable","url","Component","GoogleApiWrapper","apiKey","FaModal","show","close","onSubmit","handleClose","Modal","onHide","centered","Body","Footer","Button","GoogleMap","onMapSubmit","setShow","toggleModal","faMapMarkedAlt","WeatherForm","search","setSearch","onFormSubmit","e","placeholder","onChange","faTimes","faSearch","SearchBar","getWeather","setCity","event","preventDefault","trim","App","loading","setLoading","setError","setWeather","navigator","geolocation","getCurrentPosition","latitude","longitude","fetchWeather","Container","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.efa9a036.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./AppTitle.css\";\r\n\r\nconst AppTitle = (props) => {\r\n  return <h1 id=\"app-title\">{props.children}</h1>;\r\n};\r\n\r\nexport default AppTitle;\r\n","import React from \"react\";\r\nimport './HelperText.css';\r\n\r\nconst HelperText = () => {\r\n  return (\r\n    <div className=\"help-text\">\r\n      <p>\r\n        <strong> Search engine is very flexible. How it works:</strong>\r\n        <br />\r\n        To make it more precise put the city's name, comma, 2-letter country\r\n        code (ISO3166). You will get all proper cities in chosen country. The\r\n        order is important - the first is city name then comma then country.\r\n        Example - London, GB or New York, US.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelperText;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return <div>Loading...</div>;\r\n};\r\n\r\nexport default Loading;","import React from \"react\";\r\n\r\nconst Error = ({ children }) => {\r\n  return <small style={{ color: \"red\" }}>{children}</small>;\r\n};\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\n\r\nconst units = {\r\n  celcius: 0,\r\n  farenheit: 1,\r\n};\r\n\r\nconst UnitContext = React.createContext(units.celcius);\r\n\r\nexport { UnitContext, units };\r\n","import React from \"react\";\r\nimport { Tabs } from \"react-bootstrap\";\r\nimport \"./BsTabs.css\";\r\n\r\nconst BsTabs = ({ activeTab, children }) => {\r\n  return (\r\n    <Tabs\r\n      defaultActiveKey={activeTab}\r\n      transition={false}\r\n      bsPrefix=\"nv\"\r\n      variant=\"weather-tabs\"\r\n    >\r\n      {children}\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default BsTabs;\r\n","var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\nfunction getDay(datetime) {\r\n  return days[datetime.getDay()];\r\n}\r\n\r\nfunction getWeatherDateTime(utcSeconds, timezone) {\r\n  const dt = new Date(0);\r\n  const utcDt = utcSeconds + timezone;\r\n  dt.setUTCSeconds(utcDt);\r\n\r\n  let options = { hour: \"2-digit\", minute: \"2-digit\", timeZone: \"UTC\" };\r\n  return `\r\n  ${getDay(dt)} ${dt.getDate()}, ${dt.toLocaleTimeString([], options)}\r\n  `;\r\n}\r\n\r\nfunction getEpochDateTime(utcSeconds, timezone) {\r\n  const dt = new Date(0);\r\n  const utcDt = utcSeconds + timezone;\r\n  dt.setUTCSeconds(utcDt);\r\n  return dt;\r\n}\r\n\r\nfunction getWeatherDate(utcSeconds, timezone) {\r\n  const dt = new Date(0);\r\n  const utcDt = utcSeconds + timezone;\r\n  dt.setUTCSeconds(utcDt);\r\n\r\n  return `${getDay(dt)} ${dt.getDate()}`;\r\n}\r\n\r\nfunction getTimeLabel(utcSeconds, timezone) {\r\n  const dt = new Date(0);\r\n  const utcDt = utcSeconds + timezone;\r\n  dt.setUTCSeconds(utcDt);\r\n\r\n  let options = { hour: \"numeric\", timeZone: \"UTC\" };\r\n  return `${dt.toLocaleTimeString([], options)}`;\r\n}\r\n\r\nfunction dayOrNight(time) {\r\n  if (time.dt > time.sunrise && time.dt < time.sunset) {\r\n    return \"day\";\r\n  } else {\r\n    return \"night\";\r\n  }\r\n}\r\n\r\nexport {\r\n  getDay,\r\n  getWeatherDate,\r\n  getWeatherDateTime,\r\n  dayOrNight,\r\n  getTimeLabel,\r\n  getEpochDateTime,\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nChart.pluginService.register({\r\n  beforeRender: function (chart) {\r\n    if (chart.config.options.showAllTooltips) {\r\n      chart.pluginTooltips = [];\r\n      chart.config.data.datasets.forEach(function (dataset, i) {\r\n        chart.getDatasetMeta(i).data.forEach(function (sector, j) {\r\n          chart.pluginTooltips.push(\r\n            new Chart.Tooltip(\r\n              {\r\n                _chart: chart.chart,\r\n                _chartInstance: chart,\r\n                _data: chart.data,\r\n                _options: chart.options.tooltips,\r\n                _active: [sector],\r\n              },\r\n              chart\r\n            )\r\n          );\r\n        });\r\n      });\r\n\r\n      // turn off normal tooltips\r\n      chart.options.tooltips.enabled = false;\r\n    }\r\n  },\r\n  afterDraw: function (chart, easing) {\r\n    if (chart.config.options.showAllTooltips) {\r\n      if (!chart.allTooltipsOnce) {\r\n        if (easing !== 1) return;\r\n        chart.allTooltipsOnce = true;\r\n      }\r\n\r\n      // turn on tooltips\r\n      chart.options.tooltips.enabled = true;\r\n      Chart.helpers.each(chart.pluginTooltips, function (tooltip) {\r\n        tooltip.initialize();\r\n        tooltip.update();\r\n        tooltip.pivot();\r\n        tooltip.transition(easing).draw();\r\n      });\r\n      chart.options.tooltips.enabled = false;\r\n    }\r\n  },\r\n});\r\n\r\nconst WeatherChart = ({ labels, data, tickMax, tickStep }) => {\r\n  const chartRef = useRef();\r\n\r\n  useEffect(() => {\r\n    new Chart(chartRef.current, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            data: data,\r\n            backgroundColor: \"#fef9cc\",\r\n            borderColor: \"#fbe000\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        bezierCurve: false,\r\n        showAllTooltips: true,\r\n        // maintainAspectRatio: false,\r\n        responsive: true,\r\n        layout: {\r\n          padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n          },\r\n        },\r\n        tooltips: {\r\n          backgroundColor: \"white\",\r\n          caretSize: 0,\r\n          bodyFontSize: 13,\r\n          bodyFontFamily: \"Roboto, Helvetica, Sans-Serif\",\r\n          bodyFontColor: \"#666\",\r\n          displayColors: false,\r\n          yAlign: \"bottom\",\r\n          yPadding: 0,\r\n          caretPadding: 6,\r\n          callbacks: {\r\n            title: function (tooltipItem, data) {\r\n              return \"\"; //data['labels'][tooltipItem[0]['index']];\r\n            },\r\n            label: function (tooltipItem, data) {\r\n              return `${data[\"datasets\"][0][\"data\"][tooltipItem[\"index\"]]}°`;\r\n            },\r\n          },\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                fontColor: \"#666\",\r\n                fontFamily: \"Roboto, Helvetica, Sans-Serif\",\r\n                fontSize: 13,\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: false,\r\n              ticks: {\r\n                beginAtZero: true,\r\n                suggestedMax: tickMax,\r\n                stepSize: tickStep,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    });\r\n  });\r\n\r\n  return <canvas ref={chartRef} height=\"60\" />;\r\n};\r\n\r\nexport default WeatherChart;\r\n","import Day from \"../assets/icons/Day.svg\";\r\nimport DayClouds from \"../assets/icons/DayCloud.svg\";\r\nimport Night from \"../assets/icons/Night.svg\";\r\nimport NightClouds from \"../assets/icons/NightCloud.svg\";\r\nimport Rain from \"../assets/icons/Raining.svg\";\r\nimport { dayOrNight } from \"./datetime\";\r\n\r\nfunction getWeatherIcon(weather) {\r\n  const status = weather.weather[0].main;\r\n  const time = dayOrNight(weather);\r\n\r\n  switch (status) {\r\n    case \"Rain\":\r\n      return Rain;\r\n    case \"Clouds\":\r\n      return time === \"day\" ? DayClouds : NightClouds;\r\n    default:\r\n      return time === \"day\" ? Day : Night;\r\n  }\r\n}\r\n\r\nfunction getTabIcon(weather) {\r\n  const status = weather.weather[0].main;\r\n  switch (status) {\r\n    case \"Rain\":\r\n      return Rain;\r\n    case \"Clouds\":\r\n      return DayClouds;\r\n    default:\r\n      return Day;\r\n  }\r\n}\r\n\r\nexport { getWeatherIcon, getTabIcon };\r\n","function toCelcius(temperature) {\r\n  return ((temperature - 32) * 5) / 9;\r\n}\r\n\r\nfunction toFehrehite(temperature) {\r\n  return (temperature * 9) / 5 + 32;\r\n}\r\n\r\nfunction meterToMiles(value) {\r\n  return value / 1609;\r\n}\r\n\r\nfunction kilosToMiles(value) {\r\n  return value / 1.609;\r\n}\r\n\r\nexport { toCelcius, toFehrehite, meterToMiles, kilosToMiles };\r\n","import React, { useContext } from \"react\";\r\nimport { UnitContext, units } from \"../../../components/UnitContext\";\r\nimport { getWeatherDate } from \"../../../utils/datetime\";\r\nimport { getTabIcon } from \"../../../utils/icons\";\r\nimport { toFehrehite } from \"../../../utils/unitConverter\";\r\n\r\nconst TabTitle = ({ day, timezone }) => {\r\n  const unit = useContext(UnitContext);\r\n\r\n  const getTemperature = (temp) => {\r\n    return Math.round(unit === units.celcius ? temp : toFehrehite(temp));\r\n  };\r\n\r\n  return (\r\n    <div className=\"daily-card\">\r\n      <div>{getWeatherDate(day.dt, timezone)}</div>\r\n      <img src={getTabIcon(day)} alt=\"weather Image\" />\r\n      <div>{getTemperature(day.temp.max)}°</div>\r\n      <div>{getTemperature(day.temp.min)}°</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabTitle;\r\n","import React, { useContext } from \"react\";\r\nimport { Tab } from \"react-bootstrap\";\r\nimport WeatherTabs from \"../../../components/BsTabs\";\r\nimport { getEpochDateTime, getTimeLabel } from \"../../../utils/datetime\";\r\nimport \"./DailyWeather.css\";\r\nimport WeatherChart from \"./WeatherChart\";\r\nimport TabTitle from \"./WeatherTab\";\r\nimport { UnitContext, units } from \"../../../components/UnitContext\";\r\nimport { toFehrehite } from \"../../../utils/unitConverter\";\r\n\r\nconst DailyWeather = ({ threeFive, oneCall }) => {\r\n  const unit = useContext(UnitContext);\r\n  const daily = oneCall.daily.slice(0, 5);\r\n  let timezone = oneCall.timezone_offset;\r\n\r\n  const getTemperature = (temp) => {\r\n    return Math.round(unit === units.celcius ? temp : toFehrehite(temp));\r\n  };\r\n\r\n  const getStep = () => {\r\n    return unit === units.celcius ? 1 : 3;\r\n  };\r\n\r\n  const getMax = () => {\r\n    return unit === units.celcius ? 10 : 30;\r\n  };\r\n\r\n  const getLabels = (details) =>\r\n    details.map((item) => getTimeLabel(item.dt, timezone));\r\n  const getData = (details) =>\r\n    details.map((item) => getTemperature(item.main.temp));\r\n  const getTabTitle = (day) => <TabTitle day={day} timezone={timezone} />;\r\n\r\n  const getChartData = (day, details) => {\r\n    const title = getTabTitle(day);\r\n    const labels = getLabels(details);\r\n    const data = getData(details);\r\n    return { title, labels, data };\r\n  };\r\n\r\n  const getDetails = (list, index) => {\r\n    const indexList = [];\r\n    let date = -1;\r\n    list.forEach((el, idx) => {\r\n      const nextDate = getEpochDateTime(el.dt, timezone).getDate();\r\n      if (nextDate !== date) indexList.push(idx);\r\n      date = nextDate;\r\n    });\r\n    return list.slice(indexList[index], indexList[index] + 8);\r\n  };\r\n\r\n  return (\r\n    <div className=\"daily-weather\">\r\n      <WeatherTabs activeTab={\"tab-0\"}>\r\n        {daily.map((day, idx) => {\r\n          const details = getDetails(threeFive.list, idx);\r\n          const chartData = getChartData(day, details);\r\n          return (\r\n            <Tab key={day.dt} eventKey={`tab-${idx}`} title={chartData.title}>\r\n              <div className=\"chart\">\r\n                <WeatherChart\r\n                  labels={chartData.labels}\r\n                  data={chartData.data}\r\n                  tickMax={Math.max(...chartData.data) + getMax()}\r\n                  tickStep={getStep()}\r\n                />\r\n              </div>\r\n            </Tab>\r\n          );\r\n        })}\r\n      </WeatherTabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyWeather;\r\n","import React from \"react\";\r\nimport \"./DetailedForecast.css\";\r\n\r\nconst DetailedForecast = () => {\r\n  return (\r\n    <div className=\"detailed\">\r\n      <a href=\"https://openweathermap.org/\" target=\"_blank\">Detailed forecast</a> · Data from OpenWeather\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedForecast;\r\n","import React from \"react\";\r\nimport \"./Location.css\";\r\n\r\nconst Location = ({ city }) => {\r\n  return (\r\n    <div id=\"location\">\r\n      {`${city.name}, ${city.country}`}\r\n      <br />\r\n      <small>Updated a few minutes ago</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport { getWeatherDateTime } from \"../../../utils/datetime\";\r\nimport \"./WeatherDateTime.css\";\r\n\r\nconst WeatherDateTime = ({ current, timezone }) => {\r\n  return (\r\n    <div className=\"date-time\">\r\n      <div>{current.weather[0].description}</div>\r\n      <div>{getWeatherDateTime(current.dt, timezone)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDateTime;\r\n","import React, { useContext } from \"react\";\r\nimport { UnitContext, units } from \"../../../components/UnitContext\";\r\nimport { getWeatherIcon } from \"../../../utils/icons\";\r\nimport {\r\n  kilosToMiles, meterToMiles, toFehrehite\r\n} from \"../../../utils/unitConverter\";\r\nimport \"./WeatherInfo.css\";\r\n\r\nconst WeatherInfo = ({ weather, changeUnit }) => {\r\n  const unit = useContext(UnitContext);\r\n  const { current, daily } = weather;\r\n\r\n  const icon = getWeatherIcon(current);\r\n\r\n  const getTemperature = (temp) => {\r\n    return Math.round(unit === units.celcius ? temp : toFehrehite(temp));\r\n  };\r\n\r\n  const getUnit = (type) => {\r\n    return type === \"unit\"\r\n      ? unit === units.celcius\r\n        ? \"C\"\r\n        : \"F\"\r\n      : unit === units.celcius\r\n      ? \"F\"\r\n      : \"C\";\r\n  };\r\n\r\n  const getVision = (vision) => {\r\n    return unit === units.celcius\r\n      ? `${Math.round(vision / 1000)} KM`\r\n      : `${Math.round(meterToMiles(vision))} M`;\r\n  };\r\n\r\n  const getWind = (wind) => {\r\n    return unit === units.celcius\r\n      ? `${Math.round(wind)} KMPH`\r\n      : `${Math.round(kilosToMiles(wind))} MPH`;\r\n  };\r\n\r\n  return (\r\n    <div id=\"current-info\">\r\n      <div id=\"icon\">\r\n        <img src={icon} alt=\"weather logo\" />\r\n      </div>\r\n      <div id=\"temperature\">\r\n        <div>{getTemperature(current.temp)}</div>\r\n        <div>\r\n          <div>°{getUnit(\"unit\")}</div>\r\n          <div></div>\r\n          <div onClick={changeUnit}>{getUnit(\"button\")}</div>\r\n        </div>\r\n      </div>\r\n      <div id=\"min-max\">\r\n        <div>{getTemperature(daily[0].temp.max)}°</div>\r\n        <div>{getTemperature(daily[0].temp.min)}°</div>\r\n      </div>\r\n      <div id=\"extra-info\">\r\n        <div>Vision: {getVision(current.visibility)}</div>\r\n        <div>Wind: {getWind(current.wind_speed)}</div>\r\n        <div>Humidity: {current.humidity}%</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { UnitContext, units } from \"../../components/UnitContext\";\r\nimport DailyWeather from \"./DailyWeather\";\r\nimport DetailedForecast from \"./DetailedForecast\";\r\nimport Location from \"./Location\";\r\nimport \"./Weather.css\";\r\nimport WeatherDateTime from \"./WeatherDateTime\";\r\nimport WeatherInfo from \"./WeatherInfo\";\r\n\r\nconst Weather = ({ data }) => {\r\n  const [weatherUnit, setWeatherUnit] = useState(units.celcius);\r\n  const { threeFive, oneCall } = data;\r\n\r\n  const changeWeatherUnit = () => {\r\n    weatherUnit === units.celcius\r\n      ? setWeatherUnit(units.farenheit)\r\n      : setWeatherUnit(units.celcius);\r\n  };\r\n\r\n  return (\r\n    <UnitContext.Provider value={weatherUnit}>\r\n      <div className=\"card\">\r\n        <Location city={threeFive.city} />\r\n        <WeatherInfo weather={oneCall} changeUnit={changeWeatherUnit} />\r\n        <WeatherDateTime\r\n          current={oneCall.current}\r\n          timezone={oneCall.timezone_offset}\r\n        />\r\n        <DailyWeather {...data} />\r\n        <DetailedForecast />\r\n      </div>\r\n    </UnitContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","function isEmpty(obj) {\r\n    return Object.entries(obj).length === 0\r\n}\r\n\r\nexport {\r\n    isEmpty\r\n}","import { API_URL, API_KEY } from \"../config/config\";\r\n\r\nfunction getQuery(city, coords) {\r\n  let query;\r\n  if (coords === null) {\r\n    query = `?q=${city}`;\r\n  } else {\r\n    query = `?lat=${coords.lat}&lon=${coords.lng}&exclude=minutely,hourly,alerts`;\r\n  }\r\n\r\n  return `${query}&appid=${API_KEY}&units=metric&lang=en`;\r\n}\r\n\r\nfunction getUrl(targetApi, city, coords) {\r\n  const query = getQuery(city, coords);\r\n  return `${API_URL}${targetApi}${query}`;\r\n}\r\n\r\nasync function fetchByCoords(coords) {\r\n  const ret = {};\r\n  const url1 = getUrl(\"forecast\", null, coords);\r\n  const url2 = getUrl(\"onecall\", null, coords);\r\n\r\n  await Promise.all([\r\n    fetch(url1).then((value) => value.json()),\r\n    fetch(url2).then((value) => value.json()),\r\n  ])\r\n    .then((value) => {\r\n      ret.threeFive = value[0];\r\n      ret.oneCall = value[1];\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"fetch ERROR: \", err);\r\n    });\r\n  return ret;\r\n}\r\n\r\nasync function fetchByCity(cityName) {\r\n  const ret = {};\r\n  const url1 = getUrl(\"forecast\", cityName, null);\r\n\r\n  const response = await fetch(url1);\r\n  if (response.ok) {\r\n    await response.json().then(async (value) => {\r\n      const coords = {\r\n        lat: value.city.coord.lat,\r\n        lng: value.city.coord.lon,\r\n      };\r\n      const url2 = getUrl(\"onecall\", null, coords);\r\n      const response2 = await fetch(url2);\r\n      if (response2.ok) {\r\n        await response2.json().then((result) => {\r\n          ret.threeFive = value;\r\n          ret.oneCall = result;\r\n          ret.ok = true;\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(\"fetch city ERROR: \", err);\r\n    });\r\n  } else {\r\n    await response.json().then(err => {\r\n      ret.ok = false;\r\n      ret.error = err;\r\n    })\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport { fetchByCoords, fetchByCity };\r\n","const API_URL = \"https://api.openweathermap.org/data/2.5/\";\r\nconst API_KEY = \"06e049b7e07cd7c2f35f0fc665d48535\";\r\n\r\nexport { API_URL, API_KEY };\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst FaIcon = (props) => {\r\n  return (\r\n    <span>\r\n      <FontAwesomeIcon color=\"#767676\" size=\"lg\" {...props}/>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default FaIcon;\r\n","import { GoogleApiWrapper, Map, Marker } from \"google-maps-react\";\r\nimport React, { Component } from \"react\";\r\nimport { isEmpty } from \"../../utils/basic\";\r\n\r\nexport class MapContainer extends Component {\r\n  mapClicked = (mapProps, map, clickEvent) => {\r\n    const latLng = {\r\n      lat: clickEvent.latLng.lat(),\r\n      lng: clickEvent.latLng.lng(),\r\n    };\r\n    this.props.setMarker(latLng);\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.google) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            height: \"calc(60vh)\",\r\n          }}\r\n        >\r\n          <Map\r\n            zoom={2}\r\n            onClick={this.mapClicked}\r\n            google={this.props.google}\r\n            initialCenter={{ lat: 15.5007, lng: 32.5599 }}\r\n          >\r\n            {isEmpty(this.props.marker) ? null : (\r\n              <Marker\r\n                draggable\r\n                position={this.props.marker}\r\n                icon={{\r\n                  url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\r\n                }}\r\n              />\r\n            )}\r\n          </Map>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyD3s785xPg5XvFY5XOBUy6JiyOIcZOsyFQ\",\r\n  //   v: \"3.30\",\r\n})(MapContainer);\r\n","import React from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport \"./Modal.css\";\r\n\r\nconst FaModal = ({ show, close, children, onSubmit }) => {\r\n  const handleClose = () => close();\r\n  const handleSubmit = () => {\r\n    onSubmit();\r\n    close();\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose} centered size=\"lg\">\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"light\" size=\"sm\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n        <Button variant=\"info\" size=\"sm\" onClick={handleSubmit}>\r\n          Search Location\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FaModal;\r\n","import { faMapMarkedAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport React, { useState } from \"react\";\r\nimport FaIcon from \"../../components/FontAwesome/FontAwesome\";\r\nimport MapContainer from \"../../components/GoogleMaps\";\r\nimport MapModal from \"../../components/Modal/Modal\";\r\nimport { isEmpty } from \"../../utils/basic\";\r\n\r\nconst GoogleMap = ({ onMapSubmit }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [marker, setMarker] = useState({});\r\n\r\n  const toggleModal = (value) => setShow(value);\r\n  const handleSubmit = () => {\r\n    if (!isEmpty(marker)) onMapSubmit(marker);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FaIcon icon={faMapMarkedAlt} size=\"xs\" />\r\n      <small onClick={() => toggleModal(true)}>use google maps</small>\r\n      <MapModal\r\n        show={show}\r\n        close={() => toggleModal(false)}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <MapContainer marker={marker} setMarker={setMarker} />\r\n      </MapModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GoogleMap;\r\n","import { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport React, { useState } from \"react\";\r\nimport FaIcon from \"../../components/FontAwesome/FontAwesome\";\r\nimport GoogleMap from \"./GoogleMap\";\r\nimport \"./SearchBar.css\";\r\n\r\nconst WeatherForm = ({ search, setSearch, onFormSubmit }) => {\r\n  return (\r\n    <form onSubmit={(e) => onFormSubmit(e)}>\r\n      <input\r\n        placeholder=\"search city\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      {!search.length ? null : (\r\n        <FaIcon icon={faTimes} onClick={() => setSearch(\"\")} />\r\n      )}\r\n      <FaIcon\r\n        icon={faSearch}\r\n        color=\"#1287A5\"\r\n        onClick={(e) => onFormSubmit(e)}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SearchBar = ({ getWeather }) => {\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const getByCoords = (marker) => {\r\n    setCity(\"\");\r\n    getWeather(marker);\r\n  };\r\n\r\n  const getByCity = (event) => {\r\n    event.preventDefault();\r\n    if (city.trim().length > 0) {\r\n      getWeather(null, city.trim());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"search-bar\">\r\n      <WeatherForm search={city} setSearch={setCity} onFormSubmit={getByCity} />\r\n      <GoogleMap onMapSubmit={getByCoords} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport AppTitle from \"../components/AppTitle\";\nimport HelperText from \"../components/HelperText\";\nimport Loading from \"../components/Loading\";\nimport Error from \"../components/Error\";\nimport Weather from \"../application/Weather\";\nimport { isEmpty } from \"../utils/basic\";\nimport { fetchByCity, fetchByCoords } from \"../utils/fetch\";\nimport \"./App.css\";\nimport SearchBar from \"./SearchBar/SearchBar\";\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({});\n  const [weather, setWeather] = useState({});\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async function (position) {\n        const coords = {\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        };\n        fetchWeather(coords);\n      });\n    }\n    console.log(\"Use Effect fired!\");\n  }, []);\n\n  const fetchWeather = (coords, city = null) => {\n    console.log(\"fetching: \", coords, city);\n    setLoading(true);\n    setError({});\n    city !== null\n      ? fetchByCity(city).then((result) => {\n          result.ok ? setWeather({ ...result }) : setError({ ...result.error });\n          setLoading(false);\n        })\n      : fetchByCoords(coords).then((result) => {\n          setWeather({ ...result });\n          setLoading(false);\n        });\n  };\n\n  return (\n    <Container id=\"app\">\n      <div>\n        <AppTitle>OpenWeather App</AppTitle>\n        <SearchBar getWeather={fetchWeather} />\n        {loading ? (\n          <Loading />\n        ) : !isEmpty(error) ? (\n          <Error>{error.message}, try using map instead.</Error>\n        ) : isEmpty(weather) ? (\n          <HelperText />\n        ) : (\n          <Weather data={weather} />\n        )}\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './application/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"slick-carousel/slick/slick.css\"; \nimport \"slick-carousel/slick/slick-theme.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n/**\n    const getDaysWeather = (list) => {\n    const days = [];\n    let i,\n      temp,\n      chunk = 8, minList, maxList;\n    for (i = 0; i < list.length; i += chunk) {\n      temp = list.slice(i, i + chunk);\n      minList = temp.map((item) => item.main.temp_min);\n      maxList = temp.map((item) => item.main.temp_max);\n      days.push({\n        temp_min: Math.min(...minList),\n        temp_max: Math.max(...maxList),\n      });\n    }\n\n    return days;\n  };\n\n  const filterWeatherInfo = (data) => {\n    let filteredData = { list: [] };\n    filteredData.city = {\n      name: data.city.name,\n      country: data.city.country,\n      timezone: data.city.timezone,\n    };\n    data.list.map((item) => {\n      const newItem = {};\n      newItem.dt = item.dt;\n      newItem.main = {\n        temp: item.main.temp,\n        temp_min: item.main.temp_min,\n        temp_max: item.main.temp_max,\n        humidity: item.main.humidity,\n      };\n      newItem.weather = { description: item.weather[0].description };\n      newItem.wind = { speed: item.wind.speed };\n      newItem.visibility = item.visibility;\n\n      filteredData.list.push(newItem);\n    });\n    filteredData.days = getDaysWeather(data.list);\n    console.log(\"FD\", filteredData);\n  };\n */\n\n\n \n  // async function fetchData(text) {\n  //   setLoading(true);\n  //   let query = \"?q=\" + text + \"&appid=\" + API_KEY + \"&units=metric\";\n  //   const response = await fetch(API_URL + \"forecast\" + query);\n  //   response\n  //     .json()\n  //     .then((result) => {\n  //       if (response.ok) {\n  //         console.log(\"5/3: \", result);\n  //         query =\n  //           \"?lat=\" +\n  //           result.city.coord.lat +\n  //           \"&lon=\" +\n  //           result.city.coord.lon +\n  //           \"&appid=\" +\n  //           API_KEY +\n  //           \"&units=metric&exclude=minutely,hourly,alerts\";\n  //         fetch(API_URL + \"onecall\" + query)\n  //           .then((res) => res.json())\n  //           .then((res) => {\n  //             // setOneCall(res);\n  //             console.log(\"oneCall: \", res);\n  //           });\n  //         setWeather(result);\n  //       } else console.log(\"ERR: \", result);\n  //       setLoading(false);\n  //     })\n  //     .catch((err) => console.log(\"ERROR: \", err));\n  // }\n\n  /*\n   size=\"lg\", \"6x\" \n  <FontAwesomeIcon icon={faMapMarkedAlt} size=\"xs\"/>\n  <FontAwesomeIcon icon={faSearch} pull=\"right\"/>\n  <FontAwesomeIcon icon={faTimes} pull=\"right\"/>\n\n    <form id=\"search-form\">\n      <div className=\"form-card\">\n        <input\n          value={searchText}\n          onChange={handleChange}\n          placeholder=\"search city\"\n          name=\"searchText\"\n          className=\"form-control\"\n        />\n        {searchText.length ? (\n          <button\n            className=\"btn btn-light\"\n            data-toggle=\"tooltip\"\n            data-placement=\"bottom\"\n            title=\"Clear\"\n            onClick={handleChange}\n          >\n            <IconContext.Provider value={{ size: \"1.5em\", color: \"grey\" }}>\n              <BsX />\n            </IconContext.Provider>\n          </button>\n        ) : null}\n        <button\n          type=\"submit\"\n          className=\"btn btn-light\"\n          data-toggle=\"tooltip\"\n          data-placement=\"bottom\"\n          name=\"search\"\n          onClick={(e) => {e.preventDefault();searchWeather(searchText)}}\n        >\n          <IconContext.Provider value={{ size: \"1.3em\", color: \"#1287A5\" }}>\n            <BsSearch />\n          </IconContext.Provider>\n        </button>\n      </div>\n      <IconContext.Provider value={{ size: \".8em\", color: \"#767676\" }}>\n        <SiGooglemaps />\n      </IconContext.Provider>\n      <small onClick={hc}>use google maps</small>\n    </form>\n    */\n","module.exports = __webpack_public_path__ + \"static/media/Day.aa6f8ece.svg\";","module.exports = __webpack_public_path__ + \"static/media/DayCloud.3797634d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Raining.30ac9d7c.svg\";","module.exports = __webpack_public_path__ + \"static/media/Night.31ba1d2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/NightCloud.70a0d01f.svg\";"],"sourceRoot":""}